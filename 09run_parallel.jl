#schedulers
include("01dependencies.jl")
include("03agents.jl")
include("04params.jl")
include("02fx.jl")
include("05generate.jl")
include("06initialize.jl")
include("07agent_step!.jl")
include("08simulation_step.jl")


# running -----------------

results = []
num_runs = 1

Xmax = vcat(0.034612718,repeat([0.034640278,
0.034612718,
0.034623306,
0.034583829,
0.034494127,
0.034381,
0.034265572,
0.034235228,
0.034218162,
0.034298787,
0.034370088,
0.03448313,
0.034606236,
0.034693027,
0.034731693,
0.034691268,
0.034693941,
0.034744183,
0.034949044,
0.035142902,
0.035256079,
0.035274282,
0.035266807,
0.035406697,
0.035683454,
0.035958967,
0.036140778,
0.036296962,
0.036367372,
0.036309044,
0.036252951,
0.036232126,
0.036367721,
0.036546269,
0.036659617,
0.036783557,
0.03684229,
0.036925002,
0.037242052,
0.037783589,
0.03815762,
0.038331303,
0.038479837,
0.038753855,
0.039127647,
0.039548077,
0.039899172,
0.040131349,
0.040301155,
0.040414706,
0.040617299,
0.040814678,
0.040968912,
0.041274193,
0.041492495,
0.041584595,
0.041555262,
0.041387369,
0.04128661,
0.041249403,
0.041598427,
0.041928737,
0.04215481,
0.04234762,
0.04253577,
0.042749902,
0.043016106,
0.043213673,
0.043352483,
0.04359294,
0.043827504,
0.044074252,
0.044391653,
0.044788253,
0.045260856,
0.04564401,
0.045877259,
0.046016271,
0.046211874,
0.046419309,
0.046727903,
0.047094453,
0.047300794,
0.047339975,
0.047559427,
0.047947435,
0.048357853,
0.04871121,
0.04898785,
0.04925331,
0.049593146,
0.050015789,
0.050505916,
0.05093425,
0.051300357,
0.051761647,
0.052207176,
0.052640315,
0.053040915,
0.053603066,
0.054231286,
0.054881126,
0.055608738,
0.056340763,
0.056892235,
0.057552478,
0.058318442,
0.059033516,
0.059768272,
0.060466164,
0.060986794,
0.061338296,
0.061953268,
0.062577572,
0.063218834,
0.063778631,
0.064281909,
0.064600911,
0.064840676,
0.065199855,
0.065662102,
0.066022557,
0.066281326,
0.06637531,
0.066455207,
0.066611919,
0.066873525,
0.067091353,
0.067189379,
0.067369373,
0.067594192,
0.067745867,
0.067787217,
0.067859891,
0.067973432,
0.068126011,
0.068206279,
0.068460011,
0.068762737,
0.068875265,
0.068934865,
0.068990732,
0.069130507,
0.069291998,
0.069597494,
0.069719285,
0.069560075,
0.069524798,
0.06966179,
0.069669096,
0.069531929,
0.069537321,
0.069556735,
0.069446565,
0.069388914,
0.069234244,
0.069031757,
0.068932986,
0.069012279,
0.068880039,
0.068738432,
0.068711156,
0.068579945,
0.068388554,
0.068196444,
0.068102141,
0.067864657,
0.067623508,
0.067666627,
0.067547255,
0.067284452,
0.067009127,
0.066898394,
0.066652751,
0.066455525,
0.066359982,
0.066091602,
0.065735003,
0.065455153,
0.065353769,
0.065048655,
0.064698958,
0.064579354,
0.064375538,
0.064151016,
0.064046827,
0.064072001,
0.063926374,
0.063715636,
0.063573628,
0.063339257,
0.063158815,
0.06304311,
0.062994721,
0.062916264,
0.062790949,
0.062729889,
0.062554139,
0.062403406,
0.062286531,
0.062249443,
0.062078849,
0.061861898,
0.061746611,
0.061545361,
0.061306295,
0.061101858,
0.061027234,
0.060834098,
0.060583857,
0.06039916,
0.060151362,
0.059865691,
0.059617719,
0.059478058,
0.059199402,
0.05892368,
0.058713725,
0.058431382,
0.05815486,
0.057928201,
0.057773695,
0.057469514,
0.057122303,
0.056797048,
0.056494729,
0.05623142,
0.055974962,
0.055762548,
0.055464761,
0.055112591,
0.054816542,
0.05450529,
0.054213195,
0.053958038,
0.053782982,
0.053514643,
0.053205214,
0.052932918,
0.052692487,
0.052463501,
0.052262053,
0.052130838,
0.051958172,
0.051718361,
0.051497168,
0.051259442,
0.051031824,
0.050821423,
0.050642019,
0.05041099,
0.050160574,
0.049955712,
0.049827031,
0.049687506,
0.049528461,
0.049395392,
0.049162662,
0.048898866,
0.048640518,
0.0484401,
0.048277132,
0.048147831,
0.048049415,
0.047963224,
0.047787803,
0.047526943,
0.047361387,
0.047290982,
0.047281744,
0.047236711,
0.047090032,
0.046901955,
0.046734024,
0.046632746,
0.046519347,
0.046423015,
0.046303275,
0.046149884,
0.045984816,
0.045797635,
0.045674118,
0.045588366,
0.04550459,
0.04542985,
0.045347133,
0.045155201,
0.044968923,
0.044902602,
0.044876977,
0.044893006,
0.044838005,
0.044733742,
0.044532054,
0.044408497,
0.0444734,
0.044474778,
0.044409162,
0.044289877,
0.044166679,
0.044015023,
0.043869247,
0.043782952,
0.043751364,
0.043685725,
0.043618133,
0.043556697,
0.043403335,
0.043246842,
0.043186254,
0.043166551,
0.043197804,
0.04329356,
0.043380973,
0.043262912,
0.043046513,
0.042859233,
0.042676734,
0.042549007,
0.042336834,
0.042070441,
0.041785754,
0.041444276,
0.041194547,
0.041000352,
0.040894179,
0.040859755,
0.040748174,
0.040551154,
0.040383505,
0.040362588,
0.04040269,
0.04052279,
0.040552581,
0.040432874,
0.040248264,
0.040204605,
0.040226244,
0.040149599,
0.040058735,
0.039933043,
0.039722047,
0.03952073,
0.039379478,
0.039237585,
0.039017883,
0.038767594,
0.038669197,
0.038577546,
0.038449534,
0.038281786,
0.038076447,
0.037869259,
0.037744161,
0.037630229,
0.037464682,
0.037313864,
0.037113368,
0.036836386,
0.036638479,
0.036552325,
0.036381166,
0.036174037,
0.035994602,
0.035840514
],50))

#.fishing mortality timeseries preparation: 100 years of 0.0 + STAR_PIL_17_18_Ref 2022
zeros_100 = repeat([0.0], 50*365)

#.fishing mortality timeseries preparation: 100 years of 0.0 + STAR_PIL_17_18_Ref 2022
M_timeseries_run = vcat(0.0,zeros_100,repeat([0.13, 0.11, 0.11, 0.1, 0.08, 0.06, 0.06, 0.07, 0.08, 0.09, 0.1, 0.15, 0.17, 0.24, 0.25, 0.27, 0.29, 0.28, 0.3, 0.3, 0.3, 0.29, 0.29], inner = 365))

just_fish = repeat([0.13, 0.11, 0.11, 0.1, 0.08, 0.06, 0.06, 0.07, 0.08, 0.09, 0.1, 0.15, 0.17, 0.24, 0.25, 0.27, 0.29, 0.28, 0.3, 0.3, 0.3, 0.29, 0.29], inner = 365)

#initialize model: Na, Nj,Negg, Mf, Ww, day_of_the_year, Xmax, Kappa, Temp, M_egg, M0, M1, M2, M3, M4)
# Initialize models
models = [
    model_initialize_parallel(1.0, 0.0, 0.0, 0.0, 1.7e14, 1.0, 0.2 , 0.945, 15.0, 0.9995, 1.06,  0.86, 0.69,0.62,0.48) 
]


# Initialize dataframes
adata =  [:type, :Nind]
mdata = [:day_of_the_year, :year, :TotB,:JuvB,:AdB, :f, :deadJ_nat, :deadJ_old, :deadJ_starved, :deadA_nat, :deadA_old, :deadA_starved, :fished, :fishedW, :meanJuvL, :sdJuvL, :meanAdL, :sdAdL, :mean_tpuberty, :sd_tpuberty, :meanJuvWw, :sdJuvWw, :meanAdWw, :sdAdWw, :mean_Hjuve, :sd_Hjuve]

# Run the model for each model in the list
for (i, model) in enumerate(models)
    start_time = Dates.now()

    df_agent = init_agent_dataframe(model, adata)
    df_model = init_model_dataframe(model, mdata)

    df_agent = run!(model, 365*5; adata, mdata)

    push!(results, df_agent)

    end_time = Dates.now()
    duration = end_time - start_time
    minutes = duration / Dates.Minute(1)
    rounded_minutes = round(Int, minutes)
    println("Simulation $i took: ", minutes, " minutes")
end


#thousands of individual by year
pop = plot_population_timeseries(results[1][1], missing, true)

#type of deaths
deaths = plot_param_timeseries(results[1][2],[:deadA_starved, :deadA_nat, :deadA_old,:deadJ_starved, :deadJ_nat, :deadJ_old, :fished])

#annual mean biomass in tonnes
biom = plot_annual_param_timeseries(results[1][2],[:TotB, :JuvB, :AdB], true, :mean, "Anual mean tonnes of biomass")

# food limitations with functional response
fr = plot_param_timeseries(results[1][2], [:f])
#mean adult and juvenile length
lengths = plot_means_with_std(results[1][2], [:meanAdL, :meanJuvL], [:sdAdL, :sdJuvL])

# Total annual fished biomass in tonnes 
fished = plot_annual_param_timeseries(results[1][2],[:fishedW], true, :sum, "Annual sum of fished weight")

# mean biomass in medias sampling period (june september)
summerbiom = plot_timeframe_param_timeseries(results[1][2], [:TotB, :JuvB, :AdB], 30.0*6, 30.0*9,true, :mean, "Biomass (tonnes)")